async function requestToOpenAI(e,t,i,a){const s={model:"gpt-4",messages:[{role:"system",content:`${i}`},{role:"user",content:`${a}: ${e}`}],temperature:.2,max_tokens:900};try{const e=await fetch("https://api.openai.com/v1/chat/completions",{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${t}`},body:JSON.stringify(s)});if(!e.ok)throw new Error(`Error code: ${e.status}. ${e.statusText}`);const i=(await e.json()).choices[0].message.content;if(i.includes("User input is not a medical question"))throw new Error("User input is not a medical question");return{message:i,status:"Ok"}}catch(e){throw console.error("Error in requestToOpenAI:",e),e}}async function requestToWikipedia(e){let t=JSON.parse(e),i=[],a=0;for(const e in t)i.push({id:a,word:e,definition:t[e],wikipedia:!1}),a++;let s=[];const o=i.map((async e=>{const t=e.word;try{const i=await fetch(`https://en.wikipedia.org/api/rest_v1/page/summary/${t}`);if(!i.ok)throw new Error("Network response was not ok");const a=await i.json(),{extract:o}=a;o.includes("may refer to:")?s.push({id:e.id,word:t,definition:e.definition,wikipedia:!1}):s.push({id:e.id,word:t,definition:o,wikipedia:!0})}catch(i){s.push({id:e.id,word:t,definition:e.definition,wikipedia:!1})}}));return await Promise.all(o),s.sort(((e,t)=>e.id-t.id)),s}async function requestKeywordsOpenAI(e,t){try{const i=(await requestToOpenAI(e,t,"You suggest keywords in medical domain to help people search articles in pubmed database. You provide the answers in json format with a property called Results. Results property has an array of the suggested phrases elements. Each suggested phrase can contain few keywords. If the user input is not a medical or bio question or related to health, you are only allowed to create a json with property of Element that has an array with one element. the element is :User input is not a medical question.","Generate keywords relevant to the question. Focus on terms that elucidate the relationship between the words and their topic, including related factors, mechanisms, and relevant research areas. These keywords should facilitate searching for pertinent articles on PubMed. You should provide at least 3 phrases that contains keywords relevent to the question. seperate each phrase with a comma. ")).message;return JSON.parse(i).Results}catch(e){throw new Error(e.message)}}export async function requestSummary(e){const t="You are an expert science communicator who understands how to simplify scientific text specifically in the medical field. You can simplify the text based on different levels of simplification. In this task, you must simplify the given text, using the user's description.",i=await requestToOpenAI(e.body.originalAbstract,e.body.OPENAI_TOKEN,t,"Simplify the following abstract of a medical article while retaining the main idea. The target audience is individuals with an undergraduate university degree. Use language that is understandable for this audience while keeping some technical terms that are not overly complicated. Try not to summerize it. Ensure that the main idea of the original text is preserved without adding any additional information. this is the abstract:"),a=await requestToOpenAI(e.body.originalAbstract,e.body.OPENAI_TOKEN,t,"Simplify the following abstract of a medical article while retaining the main idea. The target audience is individuals with an elementary school education degree. Use easy-to-understand language and avoid technical jargon and complex terms. You are allowed to summerize the text, but try not to summerize it too much. Ensure that the main idea of the original text is preserved without adding any additional information.  this is the abstract"),s=await requestToOpenAI(e.body.originalTitle,e.body.OPENAI_TOKEN,t,"Simplify the following title:"),o=await requestToOpenAI(e.body.originalAbstract,e.body.OPENAI_TOKEN,t,"Find maximum 10 words from this abstract that might not be known to a reader with elementary school degree, also add 1-2 line of description for each, the end result should be in json format, which keys are the words in lowercase and values are the definition of the words:"),n=await requestToWikipedia(o.message);return{advancedAbstract:i.message,elementaryAbstract:a.message,summerizedTitle:s.message,hardWords:n}}export async function requestKeywords(e,t){try{return await requestKeywordsOpenAI(e.body.medicalQuestion,e.body.OPENAI_TOKEN)}catch(e){if("User input is not a medical question"===e.message){const t=new Error(e.message);throw t.status=400,t}{const t=new Error(e.message);throw t.status=500,t}}}