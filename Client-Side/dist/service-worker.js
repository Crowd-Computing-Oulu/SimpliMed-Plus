import{requestSummary,requestKeywords}from"./backend-utils.js";chrome.sidePanel.setPanelBehavior({openPanelOnActionClick:!0}).catch((e=>console.error(e)));let state={isLoading:!1,difficultyLevel:0,feedback:{originalTime:0,advancedTime:0,elementaryTime:0},chatHistory:[{sender:"ai",message:"Ask a medical question and I will find relevant keywords for you."}]};async function clearChromeStorage(){return new Promise(((e,t)=>{chrome.storage.local.remove(["openAIKey"],(function(){e()}))}))}async function verifyToken(e){try{const t=await fetch("https://api.openai.com/v1/models",{method:"GET",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`}});if(200!==t.status){if(401===t.status){const e=new Error("Invalid API key. Please try again.");throw e.status=`${t.status}`,e}if(403===t.status){const e=new Error("Country, region, or territory not supported.");throw e.status=t.status,e}if(429===t.status){const e=new Error("Rate limit reached for requests.");throw e.status=t.status,e}if(500===t.status||503===t.status){const e=new Error("The server had an error while processing your request, try again.");throw e.status=t.status,e}{const e=new Error("Invalid API key. Please try again.");throw e.status=t.status,e}}return e}catch(e){throw e}}chrome.tabs.onActivated.addListener((function(e){chrome.tabs.get(e.tabId,(function(e){chrome.runtime.sendMessage({action:"Tab Switched",url:e.url})}))})),chrome.tabs.onUpdated.addListener((function(e,t,a){t.url&&chrome.runtime.sendMessage({action:"URL Changed",url:t.url})})),chrome.runtime.onMessage.addListener((function(e,t,a){if("firstOpen"===e.action)return chrome.storage.local.get(["openAIKey"],(function(e){e.openAIKey?(state.openAIKey=e.openAIKey,a({response:"TokenExist",state})):a({response:"NoToken"})})),!0;if("loginRequest"===e.action)return e.openAIKey&&verifyToken(e.openAIKey).then((function(t){state.openAIKey=e.openAIKey,chrome.storage.local.set({openAIKey:state.openAIKey}),a({response:"Login Successful",state})})).catch((function(e){console.error("Login failed:",e),a({errorMessage:e.message,errorStatus:e.status})})),!0;if("logoutRequest"===e.action)return clearChromeStorage().then((function(){state={isLoading:!1,difficultyLevel:0,instructionShown:!1,feedback:{originalTime:0,advancedTime:0,elementaryTime:0,onBoardingQuestionnaire:{}},chatHistory:[{sender:"ai",message:"Ask a medical question and I will find relevant keywords for you."}]},a({response:"Logout Successfull",state})})).catch((function(e){console.error("Logout failed:",e)})),!0;if("summaryRequest"===e.action){if(state.openAIKey){delete state.abstractData,delete state.feedback,state.feedback={originalTime:0,advancedTime:0,elementaryTime:0},state.instructionShown=!0,state.isLoading=!0,chrome.runtime.sendMessage({action:"updateState",state});const{url:t,originalTitle:a,originalAbstract:s}=e.tabAbstract,r={originalAbstract:s,originalTitle:a,url:t,OPENAI_TOKEN:state.openAIKey};requestSummary({body:r}).then((e=>{state.abstractData={},state.abstractData.originalAbstract=s,state.abstractData.advancedAbstract=e.advancedAbstract,state.abstractData.elementaryAbstract=e.elementaryAbstract,state.abstractData.summerizedTitle=e.summerizedTitle,state.abstractData.hardWords=e.hardWords,state.abstractData.originalTitle=a,state.isLoading=!1,chrome.runtime.sendMessage({action:"updateState",state})})).catch((e=>{}))}return!0}if("requestKeywords"===e.action){const t={medicalQuestion:e.medicalQuestion,OPENAI_TOKEN:state.openAIKey};return requestKeywords({body:t}).then((e=>{a({response:"Ai response",suggestedKeywords:e})})).catch((e=>{a({error:"Error",errorMessage:e.message,errorStatus:e.status})})),!0}}));